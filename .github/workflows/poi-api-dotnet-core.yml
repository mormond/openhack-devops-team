name: POI API Workflow

on:
  workflow_dispatch:

env:
  wd_path: apis/poi
  repo_url: docker.pkg.github.com
  resource_group: AppServiceTest
  webapp_name: meoopenhackpf79scm7poi
  api_name: api-poi
  healthcheck_path: azurewebsites.net/api/healthcheck/poi

jobs:     
  build:   
    runs-on: ubuntu-latest
    name: Build and test
    defaults:
      run:
        working-directory: ${{ env.wd_path }}    

    steps:    
      - uses: actions/checkout@v2
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        #with:
          #dotnet-version: 2.1.x

      - name: Install dependencies
        run: dotnet restore
      
      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      - name: Test
        run: dotnet test --no-restore --verbosity normal
        
  log_issue:
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Create issue when failed
        id: create-issue
        uses: JasonEtco/create-an-issue@v2
        with:
          filename: .github/ISSUE_TEMPLATE/bug_report.md        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          name: Build failed
          title: The build failed for ${{ github.workflow }}
             
      - name: Log issue number
        run: 'echo Created issue number ${{ steps.create-issue.outputs.number }}'

  push_to_registry:
    if: github.ref == 'refs/heads/master'
    needs: [build]
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.wd_path }}/web   
           
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Login to package registry
        run: docker login ${{ env.repo_url }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
        
      - name: Build docker image
        run: docker build -t ${{ env.repo_url }}/${{ github.repository }}/${{ env.api_name }}:${{ github.run_number }} .

      - name: Push to registry
        run: docker push ${{ env.repo_url }}/${{ github.repository }}/${{ env.api_name }}:${{ github.run_number }}

  deploy:
    needs: [push_to_registry]
    name: Deploy to staging
    runs-on: ubuntu-latest    

    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: |
          az webapp start \
            --slot staging \
            --resource-group ${{ env.resource_group }} \
            --name ${{ env.webapp_name }} 

      - run: |
          az webapp config container set \
            --docker-registry-server-url https://${{ env.repo_url }} \
            --docker-registry-server-user ${{ github.actor }} \
            --docker-registry-server-password ${{ secrets.PACKAGESPAT }} \
            --resource-group ${{ env.resource_group }} \
            --slot staging \
            --name ${{ env.webapp_name }}

      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.webapp_name }}
          slot-name: staging
          publish-profile: ${{ secrets.POIWEBAPPPUBLISHSTAGINGPROFILE }}
          images: '${{ env.repo_url }}/${{ github.repository }}/${{ env.api_name }}:${{ github.run_number }}'

  check-staging:
    needs: [deploy]
    runs-on: ubuntu-latest  
    name: Run healthcheck on staging 
    timeout-minutes: 5

    steps:
      - name: Wait on
        uses: iFaxity/wait-on-action@v1
        with:
          resource: https-get://${{ env.webapp_name }}-staging.${{ env.healthcheck_path }}
          interval: 5000
          
      - name: Healthcheck
        run: |
          SUCCESS='false'
          for (( j=0; j<10; j++ ))
          do
            sleep $((j*10))
            RESPONSE=$(curl https://${{ env.webapp_name }}-staging.${{ env.healthcheck_path }} --silent --header 'Accept: application/json') 
            RESULT=$(echo $RESPONSE | jq '.status')
            echo $RESULT
            if [[ $RESULT = \"Healthy* ]]; then SUCCESS='true'; break; fi
          done
          if [ $SUCCESS == "false" ]; then exit 1; fi

  switch-staging-production:
    needs: [check-staging]
    runs-on: ubuntu-latest  
    name: Swap staging to production 

    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - run: |
          az webapp deployment slot swap \
            --slot staging \
            --target-slot production \
            --resource-group ${{ env.resource_group }} \
            --name ${{ env.webapp_name }} 

  check-production:
    needs: [switch-staging-production]
    runs-on: ubuntu-latest  
    name: Run healthcheck on production 

    steps:        
      - name: Healthcheck
        run: |
          SUCCESS='false'
          for (( j=0; j<10; j++ ))
          do
            sleep $((j*10))
            RESPONSE=$(curl https://${{ env.webapp_name }}.${{ env.healthcheck_path }} --silent --header 'Accept: application/json') 
            RESULT=$(echo $RESPONSE | jq '.status')
            echo $RESULT
            if [[ $RESULT = \"Healthy\ Production* ]]; then SUCCESS='true'; break; fi
          done
          if [ $SUCCESS == "false" ]; then exit 1; fi

  rollback:
    needs: [check-production]
    if: failure()
    runs-on: ubuntu-latest  
    name: Rollback on failure

    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Failure - swap staging back to production
        run: |
          az webapp deployment slot swap \
            --slot staging \
            --target-slot production \
            --resource-group ${{ env.resource_group }} \
            --name ${{ env.webapp_name }} 

  stopstaging:
    needs: [check-production, rollback]
    if: always()
    runs-on: ubuntu-latest  
    name: Stop staging on success

    steps:
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Success - stop staging slot
        run: |
          az webapp stop \
            --slot staging \
            --resource-group ${{ env.resource_group }} \
            --name ${{ env.webapp_name }} 
